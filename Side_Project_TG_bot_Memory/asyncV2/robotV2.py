import requests
import json
import os
import re
import random
import memory
import asyncio
import os
import research
import sqlite3
import time
from retrying_async import retry
from datetime import datetime, timedelta
import sys

# # Set default encoding to UTF-8
# if sys.stdout.encoding != 'utf-8':
#     sys.stdout.reconfigure(encoding='utf-8')
#
# if sys.stderr.encoding != 'utf-8':
#     sys.stderr.reconfigure(encoding='utf-8')
# Set default encoding to UTF-8 for stdout
if sys.stdout.encoding != 'utf-8':
    sys.stdout = open(sys.stdout.fileno(), mode='w', encoding='utf-8', buffering=1)

# Set default encoding to UTF-8 for stderr
if sys.stderr.encoding != 'utf-8':
    sys.stderr = open(sys.stderr.fileno(), mode='w', encoding='utf-8', buffering=1)

# OpenAI secret Key
API_KEY = os.environ['API_KEY']
# Models: text-davinci-003,text-curie-001,text-babbage-001,text-ada-001
# MODEL = 'text-davinci-003'
MODEL = 'gpt-3.5-turbo'
# Telegram secret access bot token
BOT_TOKEN = os.environ['BOT_TOKEN']
# Specify all group ID the bot can respond too
ALLOWED_GROUP_ID = os.environ['ALLOWED_GROUP_ID']
# Specify your Chat Bot handle
CHATBOT_HANDLE = os.environ['CHATBOT_HANDLE']
# Retrieve last ID message : Create an empty text file named chatgpt.txt, write 1 on the first line of
# the text file and save it, write the full path of your file below
FILENAME = 'chatgpt.txt'  # the update number is stored

ASK_COMMAND = '/ask'
CLEAR_COMMAND = '/clear'
START_COMMAND = '/start'
INFO_COMMAND = '/info'
REFERRAL_COMMAND = '/refer'


SUBSCRIPTION_COMMAND = '/pay'
SUBSCRIPTION_DATABASE = 'subscriptions.db'
MESSAGES_DATABASE = 'messages.db'
BOT_NAME = 'biblionarium_chatgpt_bot'

CHANNEL_NAME = 'Biblionarium'
DAY_LIMIT_PRIVATE = 3  # base is 10
DAY_LIMIT_SUBSCRIPTION = 100
CONTEXT_DEPTH = 3 * 2  # twice the context, because we get the users and the bots messages, base would be 10 * 2
MAX_TOKENS = 500
REFERRAL_BONUS = 3  # free messages that are used after the limit is over, base is 30
file = '1ClockworkOrange.txt'  # the current book loaded file

conn = sqlite3.connect(MESSAGES_DATABASE)
cursor = conn.cursor()

conn_pay = sqlite3.connect(SUBSCRIPTION_DATABASE)
cursor_pay = conn_pay.cursor()

# Create a table to store messages
cursor.execute('''CREATE TABLE IF NOT EXISTS messages
                  (timestamp INTEGER, chat_id INTEGER, role TEXT, message TEXT, cleared INTEGER DEFAULT 0)''')
conn.commit()

# Create the subscriptions table
cursor_pay.execute('''CREATE TABLE IF NOT EXISTS subscriptions
                 (chat_id INTEGER PRIMARY KEY, subscription_status INTEGER, revealed_date  TEXT, start_date TEXT, 
                 expiration_date TEXT, referral_link TEXT, referred_by TEXT, bonus_count INTEGER DEFAULT 0)''')
conn_pay.commit()


# Make the request to
# the OpenAI API
@retry(attempts=3, delay=3)
async def openAI(prompt, max_tokens, messages):
    # the example
    # messages = [
    #     {"role": "system", "content": "You are a helpful assistant."},
    #     {"role": "user", "content": "Who won the world series in 2020?"},
    #     {"role": "assistant", "content": "The Los Angeles Dodgers won the World Series in 2020."},
    #     {"role": "user", "content": "Where was it played?"}
    # ]
    # if we don't get the history for the chat, then we create the list which append with the prompt
    if messages is None:
        messages = []
    messages.append({"role": "user", "content": prompt})
    # TODO Add the system message as a role setting
    print("openAI sending request", prompt)
    response = requests.post(
        'https://api.openai.com/v1/chat/completions',
        headers={'Authorization': f'Bearer {API_KEY}'},
        json={'model': MODEL, 'messages': messages,
              'temperature': 0.8, 'max_tokens': max_tokens},
        timeout=30
    )
    response.raise_for_status()  # Raises an exception for non-2xx status codes
    result = response.json()
    final_result = ''
    for i in range(0, len(result['choices'])):
        final_result += result['choices'][i]['message']['content']
    return final_result


async def add_private_message_to_db(chat_id, text, role):
    # Here, we'll store the message in the SQLite database
    timestamp = int(time.time())
    cursor.execute("INSERT INTO messages (timestamp, chat_id, role, message) VALUES (?, ?, ?, ?)",
                   (timestamp, chat_id, role, text))
    conn.commit()


async def get_last_messages(chat_id, amount):
    # Retrieve the last messages from the database
    cursor.execute(f"SELECT chat_id, role, message FROM messages WHERE chat_id = ? AND CLEARED = 0 "
                   f"ORDER BY timestamp DESC LIMIT {amount}", (chat_id,))
    rows = cursor.fetchall()
    reversed_rows = reversed(rows)  # Reverse the order of the rows
    messages = []
    for row in reversed_rows:
        chat_id, role, message = row
        # print(f"Chat ID: {chat_id}, Role: {role}, Message: {message}")
        messages.append({'role': role, 'content': message})
    return messages


async def check_message_limit(chat_id, limit):
    # Get the timestamp for the start of the current calendar day
    start_of_day = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    start_of_day_timestamp = start_of_day.timestamp()
    # Retrieve the message count for the current chat_id from the database
    cursor.execute('SELECT COUNT(*) FROM messages WHERE chat_id = ? AND role = ? AND timestamp > ?',
                   (chat_id, 'user', start_of_day_timestamp))
    message_count = cursor.fetchone()[0]
    # get the bonus free messages if exist
    cursor_pay.execute("SELECT bonus_count FROM subscriptions WHERE chat_id = ?", (chat_id,))
    free_message_count = cursor_pay.fetchone()[0]

    # print(f"Today {chat_id} had {message_count} messages")
    # Check if the message limit has been reached
    if message_count >= limit:
        if free_message_count <= 0:
            return False, limit - message_count, free_message_count  # Message limit reached, return False
        else:
            return True, limit - message_count, free_message_count
    return True, limit - message_count, free_message_count  # Message within limit, return True

    # TODO Add the selling message for the second or first limit message


# TODO Should this be async?
async def handle_clear_command(chat_id):
    # Update the messages associated with the specified chat_id so they are "cleared"
    # cursor.execute('UPDATE messages SET message = "<Cleared>" WHERE chat_id = ?', (chat_id,))
    cursor.execute('UPDATE messages SET cleared = 1 WHERE chat_id = ?', (chat_id,))
    conn.commit()


# TODO Should this be async?
async def subcribe_channel(chat_id):
    message = f'''
–ö–∞–∂–µ—Ç—Å—è, –≤—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—à –∫–Ω–∏–∂–Ω—ã–π –∫–∞–Ω–∞–ª '–ë–∏–±–ª–∏–æ–Ω–∞—Ä–∏—É–º'

–ó–¥–µ—Å—å –º—ã –¥–µ–ª–∏–º—Å—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã–º–∏ –º—ã—Å–ª—è–º–∏ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É üíª

üì≤ –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞, –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª! üëåüèº
'''
    # change to NOT after the test
    x = await telegram_send_text_with_button(message, chat_id, '–ë–∏–±–ª–∏–æ–Ω–∞—Ä–∏—É–º', CHANNEL_NAME)


async def handle_info_command(chat_id, validity, messages_left, free_messages_left):
    subscription_status = '–ê–∫—Ç–∏–≤–Ω–∞' if validity else '–ù–µ –∞–∫—Ç–∏–≤–Ω–∞'
    # Get the current date and time
    current_datetime = datetime.now()
    # Increment the current date by 1 day to get the next day
    next_day = current_datetime + timedelta(days=1)
    # Set the time to 00:00:00 for the next day
    next_day_start = next_day.replace(hour=0, minute=0, second=0, microsecond=0)
    # Calculate the time difference between the current datetime and the next day's start
    time_left = next_day_start - current_datetime
    # Extract the number of hours and minutes from the time difference
    hours_left = time_left.seconds // 3600
    minutes_left = (time_left.seconds % 3600) // 60

    if messages_left < 0:
        messages_left = 0

    if validity:
        conn_pay = sqlite3.connect(SUBSCRIPTION_DATABASE)
        cursor_pay = conn_pay.cursor()
        # Retrieve the expiration date for the user
        cursor_pay.execute("SELECT expiration_date FROM subscriptions WHERE chat_id = ?", (chat_id,))
        result = cursor_pay.fetchone()[0]
        expiration_date = datetime.strptime(result, '%Y-%m-%d').strftime('%d-%m-%Y')
        message = f'''
‚ö°Ô∏è–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_status} –¥–æ {expiration_date}.

üîÑ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_left}. –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ : {hours_left} —á. {minutes_left} –º–∏–Ω.

–¢–∞–∫–∂–µ —É –≤–∞—Å –µ—Å—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {free_messages_left}.                  
    '''
    else:
        message = f'''
‚ö°Ô∏è–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_status}

üîÑ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_left}. –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ : {hours_left} —á. {minutes_left} –º–∏–Ω.

–¢–∞–∫–∂–µ —É –≤–∞—Å –µ—Å—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {free_messages_left}.              

üöÄ –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ?      

–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —á–∞—Ç-–±–æ—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ –ª–∏–º–∏—Ç–∞–º–∏.

–¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /refer. –ö–æ–≥–¥–∞ –¥—Ä—É–≥ –Ω–∞—á–Ω—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ {REFERRAL_BONUS} –±–æ–Ω—É—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π! 

'''
    try:
        x = await telegram_bot_sendtext(message, chat_id, None)
    except requests.exceptions.RequestException as e:
        print('Coulndt send the info message', e)

# TODO Make a Get subscription status function


async def handle_start_command(chat_id, name):
    message = f'''{name}, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!

‚ö°Ô∏è–Ø –±–æ—Ç, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –Ω–∞ ChatGPT 3.5.turbo

–Ø —É–º–µ—é:

1. –ü–∏—Å–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã
2. –ü–∏—Å–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
3. –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å –∏ –Ω–∞ —Ä–∞–∑–Ω—ã–µ —è–∑—ã–∫–∏
4. –û–±–æ–±—â–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
5. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–µ—Å–µ–¥—É –∏ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç

–ú–æ—è —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å - –≤ —Å—Ñ–µ—Ä–µ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã, —ç—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–µ–π—á–∞—Å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ—Ç –º–Ω–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å, —Å–¥–µ–ª–∞—Ç—å –∏–ª–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å.

–í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ {DAY_LIMIT_PRIVATE} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—É—Ç–∫–∏. –° –ø–æ–¥–ø–∏—Å–∫–æ–π –ª–∏–º–∏—Ç —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –¥–æ {DAY_LIMIT_SUBSCRIPTION}.

–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ - 150—Ä –≤ –º–µ—Å—è—Ü.

üîÑ –í—ã –º–æ–∂–µ—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –±–µ—Å–µ–¥—É, —á—Ç–æ–±—ã —è –Ω–µ –ø–æ–¥—Ç—è–≥–∏–≤–∞–ª –∏–∑ –ø–∞–º—è—Ç–∏ –Ω–µ–Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –¥–ª—è —ç—Ç–æ–≥–æ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞
/clear.

‚ùï –ï—Å–ª–∏ —è –≤–∞–º –Ω–µ –æ—Ç–≤–µ—á–∞—é, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π /start

–°–ø–∞—Å–∏–±–æ! '''
    try:
        x = await telegram_bot_sendtext(message, chat_id, None)
    except requests.exceptions.RequestException as e:
        print('Coulndt send the welcome message', e)


@retry(attempts=3)
async def handle_pay_command(chat_id):
    # Set up the payment request
    # –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ä—Ç—ã: 1111 1111 1111 1026, 12/22, CVC 000.
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendInvoice"
    payload = {
        "chat_id": chat_id,
        "title": "–ü–æ–¥–ø–∏—Å–∫–∞",
        "description": "–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
        "payload": "payment-payload-test",
        "provider_token": "381764678:TEST:59292",
        "start_parameter": "The-Payment-Example",
        "currency": "rub",
        "prices": [{"label": "–ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞", "amount": 15000}]
    }
    # Send the payment request
    response = requests.post(url, json=payload)
    print(response)
    response.raise_for_status()


# 2b. Function that gets an Image from OpenAI
# async def openAImage(prompt):
#     # Make the request to the OpenAI API
#     resp = requests.post(
#         'https://api.openai.com/v1/images/generations',
#         headers={'Authorization': f'Bearer {API_KEY}'},
#         json={'prompt': prompt, 'n': 1, 'size': '256x256'}
#     )
#     response_text = json.loads(resp.text)
#     # print(response_text['data'][0]['url'])
#     return response_text['data'][0]['url']


async def handle_refer_command(chat_id):
    # Get a referral link from the database
    conn_pay = sqlite3.connect(SUBSCRIPTION_DATABASE)
    cursor_pay = conn_pay.cursor()
    cursor_pay.execute("SELECT referral_link FROM subscriptions WHERE chat_id = ?", (chat_id,))
    result = cursor_pay.fetchone()[0]
    print('The referral link is', result)

    message = f'''
‚ö° –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –±–æ—Ç—É: {result}.

üîÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥—É.
        '''
    try:
        x = await telegram_bot_sendtext(message, chat_id, None)
    except requests.exceptions.RequestException as e:
        print('Coulndt send the info message', e)


@retry(attempts=3, delay=3)
async def edit_bot_message(text, chat_id, message_id ):
    url = f'https://api.telegram.org/bot{BOT_TOKEN}/editMessageText'
    payload = {
        'chat_id': chat_id,
        'message_id': message_id,
        'text': text
    }
    response = requests.post(url, json=payload, timeout=20)
    response.raise_for_status()
    print("Edited the message in TG", response)
    return response.json()


@retry(attempts=3)
async def set_typing_status(chat_id):
    url = f'https://api.telegram.org/bot{BOT_TOKEN}/sendChatAction'
    payload = {
        'chat_id': chat_id,
        'action': 'typing'
    }
    response = requests.post(url, json=payload)
    response.raise_for_status()


@retry(attempts=3)
async def handle_pre_checkout_query(update):
    pre_checkout_query_id = update['pre_checkout_query']['id']
    invoice_payload = update['pre_checkout_query']['invoice_payload']
    currency = update['pre_checkout_query']['currency']
    total_amount = int(update['pre_checkout_query']['total_amount']) / 100
    user_id = update['pre_checkout_query']['from']['id']
    # Confirm the payment
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/answerPreCheckoutQuery"
    payload = {
        "pre_checkout_query_id": pre_checkout_query_id,
        "ok": True
    }
    response = requests.post(url, json=payload)
    response.raise_for_status()
    print(f'The id {user_id} paid {total_amount} in {currency} for {invoice_payload}')
    # [{'update_id': 32981369, 'pre_checkout_query': {'id': '703966766410488648', 'from': {'id': 163905035,
    # 'is_bot': False, 'first_name': 'Vladimir', 'last_name': 'Smetanin', 'username': 'v_smetanin',
    # 'language_code': 'ru'}, 'currency': 'RUB', 'total_amount': 15000, 'invoice_payload': 'payment-payload-test'}}]


@retry(attempts=3)
async def handle_successful_payment(update):
    amount = str(int(update['successful_payment']['total_amount']) / 100)
    receipt_message = f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!\n"\
                      f"–¢–æ–≤–∞—Ä: {update['successful_payment']['invoice_payload']}\n"\
                      f"–°—É–º–º–∞: {amount}\n"\
                      f"–í–∞–ª—é—Ç–∞: {update['successful_payment']['currency']}\n"

    chat_id = update['chat']['id']
    try:
        x = await telegram_bot_sendtext(receipt_message, chat_id, None)
    except requests.exceptions.RequestException as e:
        print('Couldnt send the successfull payment message')

    subscription_start_date = datetime.now()
    subscription_expiration_date = subscription_start_date + timedelta(days=30)
    update_subscription_status(chat_id, 1, subscription_start_date.strftime('%Y-%m-%d'),
                               subscription_expiration_date.strftime('%Y-%m-%d'))


# [{'update_id': 32981414, 'message': {'message_id': 17537, 'from': {'id': 163905035, 'is_bot': False, 'first_name':
# 'Vladimir', 'last_name': 'Smetanin', 'username': 'v_smetanin', 'language_code': 'ru'}, 'chat': {'id': 163905035,
# 'first_name': 'Vladimir', 'last_name': 'Smetanin', 'username': 'v_smetanin', 'type': 'private'}, 'date': 1686753287,
# 'successful_payment': {'currency': 'RUB', 'total_amount': 15000, 'invoice_payload': 'payment-payload-test',
# 'telegram_payment_charge_id': '6041036556_163905035_396022',
# 'provider_payment_charge_id': '2c1be3c5-000f-5000-a000-1ab7f59323a5'}}}]


@retry(attempts=3, delay=3)
async def get_updates(last_update):
    # Check for new messages in Telegram group
    # let's test if it works with offset +1
    last_update = str(int(last_update)+1)
    url = f'https://api.telegram.org/bot{BOT_TOKEN}/getUpdates?offset={last_update}'
    response = requests.get(url, timeout=20)
    response.raise_for_status()
    data = json.loads(response.content)
    # provide all messages instead of one in update
    # result = data['result'][len(data['result'])-1]
    result = data['result']
    if data['result']:
        print(data['result'])
        print(len(data['result']), "messages")
    return result


async def parse_updates(result, last_update):
    if float(result['update_id']) > float(last_update):
        # handle the pre_check_out
        try:
            if result['pre_checkout_query']:
                try:
                    await handle_pre_checkout_query(result)
                    print('Successful checkout')
                    last_update = str(int(result['update_id']))
                except requests.exceptions.RequestException as e:
                    print('Couldnt handle the pre checkout')
                    last_update = str(int(result['update_id']))
                    try:
                        x = telegram_bot_sendtext('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!',
                                                  result['pre_checkout_query']['from']['id'])
                    except requests.exceptions.RequestException as e:
                        print('Couldnt send the Try pre_checkout again message', e)
                return last_update
        except Exception as e:
            pass

        # Checking for new messages that did not come from chatGPT
        if not result['message']['from']['is_bot']:
            # remember the last update number
            last_update = str(int(result['update_id']))
            chat_type = str(result['message']['chat']['type'])
            # check if it's a group
            if chat_type == 'supergroup':
                await handle_supergroup(result)
            # check if it's a private chat
            if chat_type == 'private':
                await handle_private(result)
    return last_update


async def handle_supergroup(result):
    print('SuperDooper')
    # Give your bot a personality using adjectives from the tone list
    bot_personality = ''
    tone_list = ['Friendly', 'Professional', 'Humorous', 'Sarcastic', 'Witty', 'Sassy', 'Charming', 'Cheeky', 'Quirky',
                 'Laid-back', 'Elegant', 'Playful', 'Soothing', 'Intense', 'Passionate']
    # Leave write_history BLANK
    write_history = ''
    chat_id = str(result['message']['chat']['id'])
    if chat_id in ALLOWED_GROUP_ID:
        msg_id = str(int(result['message']['message_id']))
        # print('In allowed group ID')
        try:
            # Greeting message for new participants
            if 'new_chat_participant' in result['message']:
                prompt = '–ù–∞–ø–∏—à–∏ –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–º —Ç–æ–Ω–µ  ' + \
                         "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –ë—É–¥—É —Ä–∞–¥ –ø–æ–º–æ—á—å –≤–∞–º, " + \
                         result['message']['new_chat_participant']['first_name']
                # random.choice(tone_list) + ' tone: ' + \

                bot_response = await openAI(prompt, 200, None)
                # Sending back response to telegram group
                try:
                    x = await telegram_bot_sendtext(bot_response, chat_id, msg_id)
                except requests.exceptions.RequestException as e:
                    print('Error in sending text to TG', e)
                name = result['message']['new_chat_participant']['first_name']
                try:
                    x = await telegram_bot_sendtext(f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - {name}', '163905035', None)
                except requests.exceptions.RequestException as e:
                    print('Error in sending text to TG', e)
        except Exception as e:
            print("Error in greeting", e)

        # try:
        #     if '/img' in result['message']['text']:
        #         prompt = result['message']['text'].replace("/img", "")
        #         bot_response = await openAImage(prompt)
        #         x = await telegram_bot_sendimage(bot_response, chat_id, msg_id)
        # except Exception as e:
        #     print(e)

        boolean_active = False
        # Checking that user mentionned chatbot's username in message
        if CHATBOT_HANDLE in result['message']['text']:
            prompt = result['message']['text'].replace(CHATBOT_HANDLE, "")
            boolean_active = True
            print('Got the Message, master!')

        # Verifying that the user is responding to the ChatGPT bot
        if 'reply_to_message' in result['message']:
            if result['message']['reply_to_message']['from']['username'] == CHATBOT_HANDLE[1:]:
                prompt = result['message']['text']
                # Getting historical messages from user
                write_history = await memory.get_channel_messages(chat_id, msg_id)
                boolean_active = True

        if boolean_active:
            try:
                prompt1 = await checkTone(prompt)
                prompt = prompt1[0]
                bot_personality = prompt1[1]
                boolean_active = True
            except Exception as e:
                print("Error at await checkTone", e)
            try:
                if write_history != '':
                    prompt = write_history + "\n\nQ : " + prompt + "\n\n###\n\n"

                try:
                    bot_response = await openAI(f"{bot_personality}{prompt}", 400, None)
                except requests.exceptions.RequestException as e:
                    print("Error while waiting for the answer from OpenAI", e)
                #
                # if bot_response == '':
                #     bot_response = await openAI(f"{bot_personality}{vague_prompt}", 400, None)
                try:
                    x = await telegram_bot_sendtext(bot_response, chat_id, msg_id)
                except requests.exceptions.RequestException as e:
                    print('Error in sending text to TG', e)

                # x = await telegram_bot_sendtext('I just sent some message', '163905035', None)

            except Exception as e:
                print("Error while waiting for the answer from OpenAI", e)
                try:
                    x = await telegram_bot_sendtext("–û—Ç–≤–µ—Ç –æ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–≥–æ –º–æ–∑–≥–∞ –ø–æ—Ç–µ—Ä—è–ª—Å—è –≤ –¥–æ—Ä–æ–≥–µ",
                                                    chat_id, msg_id)
                except requests.exceptions.RequestException as e:
                    print('Error in sending text to TG', e)
                try:
                    x = await telegram_bot_sendtext(f"OpenAI –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è - {e}", '163905035', None)
                except requests.exceptions.RequestException as e:
                    print('Error in sending text to TG', e)

        if ASK_COMMAND in result['message']['text']:
            prompt = result['message']['text'].replace(ASK_COMMAND, "")
            asked = True
            print('Got the /ask command, master!')
            try:
                answer = research.reply(file, prompt)
                try:
                    x = await telegram_bot_sendtext(answer, chat_id, msg_id)
                except requests.exceptions.RequestException as e:
                    print('Error in sending text to TG', e)
            except Exception as e:
                print("Error while waiting for the answer with from OpenAI for the /ask", e)
                try:
                    x = await telegram_bot_sendtext("–≠—Ç–æ—Ç –∫–Ω–∏–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª–æ–º–∞–ª –ª–æ–≥–∏–∫—É",
                                                    chat_id, msg_id)
                except requests.exceptions.RequestException as e:
                    print('Error in sending text to TG', e)
                try:
                    x = await telegram_bot_sendtext(f"OpenAI –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è –Ω–∞ /ask - {e}",
                                                    '163905035', None)
                except requests.exceptions.RequestException as e:
                    print('Error in sending text to TG', e)

            except Exception as e:
                print("Couldn't handle the /ask command", e)


async def handle_private(result):
    # handle the successful payment
    try:
        if result['message']['successful_payment']:
            try:
                await handle_successful_payment(result['message'])
                print('Successful payment')
                # last_update = str(int(result['update_id']))
            except requests.exceptions.RequestException as e:
                print('Couldnt handle the payment')
                # last_update = str(int(result['update_id']))
                try:
                    x = telegram_bot_sendtext('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–ª–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!',
                                              result['pre_checkout_query']['from']['id'])
                except requests.exceptions.RequestException as e:
                    print('Couldnt send the Try payment again message', e)
            return
    except Exception as e:
        pass

    chat_id = str(result['message']['chat']['id'])
    msg_id = str(int(result['message']['message_id']))
    msg = result['message']['text']

    if not user_exists(chat_id):
        add_new_user(chat_id)

    if START_COMMAND in msg:
        try:
            await handle_start_command(chat_id, result['message']['from']['first_name'])
            # check if the new user came with referral link and get the number of referree
            if msg.startswith('/start '):
                referree = msg.strip('/start ')
                print('We have got a referring user', referree)
                bonus_from_refer = await add_reffered_by(chat_id, referree)
                if bonus_from_refer:
                    add_referral_bonus(referree, REFERRAL_BONUS)
                return
            return
        except Exception as e:
            print("Couldn't handle the /start command", e)
            try:
                x = await telegram_bot_sendtext("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å",
                                                chat_id, msg_id)
            except requests.exceptions.RequestException as e:
                print('Error in sending text to TG', e)
            try:
                x = await telegram_bot_sendtext(f"–ù–µ —Å–º–æ–≥ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å —É {chat_id} - {e}",
                                                '163905035', None)
            except requests.exceptions.RequestException as e:
                print('Error in sending text to TG', e)
            return

    if CLEAR_COMMAND in msg:
        try:
            await handle_clear_command(chat_id)
            try:
                x = await telegram_bot_sendtext("–î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω",
                                                chat_id, msg_id)
            except requests.exceptions.RequestException as e:
                print('Error in sending text to TG', e)
            return
        except Exception as e:
            print("Couldn't handle the /clear command", e)
            try:
                x = await telegram_bot_sendtext("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –æ—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥",
                                                chat_id, msg_id)
            except requests.exceptions.RequestException as e:
                print('Error in sending text to TG', e)
            try:
                x = await telegram_bot_sendtext(f"–ù–µ —Å–º–æ–≥ –æ—á–∏—Å—Ç–∏—Ç—å –¥–∏–∞–ª–æ–≥ —É {chat_id} - {e}",
                                                '163905035', None)
            except requests.exceptions.RequestException as e:
                print('Error in sending text to TG', e)
            return

    if SUBSCRIPTION_COMMAND in msg:
        print('We have got a payment request')
        await handle_pay_command(chat_id)
        return

    if REFERRAL_COMMAND in msg:
        await handle_refer_command(chat_id)
        return

    is_subscription_valid = check_subscription_validity(chat_id)
    if is_subscription_valid:
        limit = DAY_LIMIT_SUBSCRIPTION
    else:
        limit = DAY_LIMIT_PRIVATE

    validity, messages_left, free_messages_left = await check_message_limit(chat_id, limit)
    print(f"Subscription for {chat_id} is valid: {is_subscription_valid}, messages left {messages_left}, "
          f"bonus messages left {free_messages_left}")

    if INFO_COMMAND in msg:
        try:
            await handle_info_command(chat_id, is_subscription_valid, messages_left, free_messages_left)
            return
        except Exception as e:
            print("Couldn't handle the /info command", e)
            try:
                x = await telegram_bot_sendtext("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –≤—ã–¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é",
                                                chat_id, msg_id)
            except requests.exceptions.RequestException as e1:
                print('Error in sending text to TG', e1)
            try:
                x = await telegram_bot_sendtext(f"–ù–µ —Å–º–æ–≥ –ø—Ä–æ–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —É {chat_id} - {e}",
                                                '163905035', None)
            except requests.exceptions.RequestException as e:
                print('Error in sending text to TG', e)
            return

    try:
        channel_subscribed = await user_subscribed(chat_id, CHANNEL_NAME)
    except requests.exceptions.RequestException as e:
        print('Couldnt check the channel subscription')

    if channel_subscribed:
        print(f'{chat_id} is subscribed on channel {CHANNEL_NAME}')
    else:
        print(f'{chat_id} is NOT subscribed on channel {CHANNEL_NAME}')

    if channel_subscribed:
        if validity:
            if messages_left <= 0:
                print('Need to decrease the free messages')
                decrease_free_messages(chat_id)
            # get the last n messages from the db to feed them to the gpt
            messages = await get_last_messages(chat_id, CONTEXT_DEPTH)
            print(messages)
            # add the last received message to the db
            await add_private_message_to_db(chat_id, msg, 'user')
            # send the last message and the previous historical messages from the db to the GPT
            prompt = msg

            # send the quick message to the user, which shows that we start thinking
            try:
                x = await telegram_bot_sendtext("‚è≥ –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –±–æ—Ç–∞...", chat_id, msg_id)
                # Extract the message_id from the response
                sent_msg_id = x['result']['message_id']
            except requests.exceptions.RequestException as e:
                print('Error in sending "Wait for the answer" text to TG', e)
            # set the typing status
            try:
                await set_typing_status(chat_id)
            except requests.exceptions.RequestException as e:
                print('Couldnt set the typing status', e)

            try:
                bot_response = await openAI(f"{prompt}", MAX_TOKENS, messages)
                await add_private_message_to_db(chat_id, bot_response, 'assistant')
            except requests.exceptions.RequestException as e:
                print("Error while waiting for the answer from OpenAI", e)
                try:
                    x = await edit_bot_message("–ö–∞–∂–µ—Ç—Å—è, —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ",
                                               chat_id, msg_id)
                    return
                except requests.exceptions.RequestException as e:
                    print('Couldnt send the message "smth happend, try later"')

            try:
                # x = await telegram_bot_sendtext(bot_response, chat_id, msg_id)
                # edit the previously sent message "Wait for the answer"
                x = await edit_bot_message(bot_response,chat_id, sent_msg_id)
            except requests.exceptions.RequestException as e:
                print('Error in editing message', e)
            # try:
            #     x = await telegram_bot_sendtext('I just sent some private message', '163905035', None)
            # except requests.exceptions.RequestException as e:
            #     print('Error in sending text to TG', e)
        else:
            print(f'For {chat_id} the day limit is reached')
            try:
                x = await telegram_bot_sendtext("–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –¥–µ–Ω—å.\n"
                                                "–ß—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç, –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å "
                                                "—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π", chat_id, msg_id)
            except requests.exceptions.RequestException as e:
                print('Error in sending "The limit is reached" text to TG', e)
    else:
        await subcribe_channel(chat_id)


# Sending a message to a specific telegram group
@retry(attempts=3, delay=3)
async def telegram_bot_sendtext(bot_message, chat_id, msg_id):
    data = {
        'chat_id': chat_id,
        'text': bot_message,
        'reply_to_message_id': msg_id
    }
    print("TG sending the text", data)
    response = None
    response = requests.post(
        'https://api.telegram.org/bot' + BOT_TOKEN + '/sendMessage',
        json=data, timeout=10
    )
    response.raise_for_status()  # Raises an exception for non-2xx status codes
    print("TG sent the data", response)
    return response.json()


@retry(attempts=3, delay=5)
async def telegram_send_text_with_button(message_text, chat_id, button_text, channel_username):
    api_url = f'https://api.telegram.org/bot{BOT_TOKEN}/sendMessage'
    # Create the inline keyboard button
    keyboard = {
        'inline_keyboard': [[
            {'text': button_text, 'url': f't.me/{channel_username}'}  # Button with link to the channel
        ]]
    }
    # Convert the keyboard dictionary to JSON string
    reply_markup = json.dumps(keyboard)
    # Set the parameters for the API request
    params = {
        'chat_id': chat_id,
        'text': message_text,
        'reply_markup': reply_markup
    }
    # Send the API request
    response = requests.post(api_url, params=params)
    response.raise_for_status()

# Sending a image to a specific telegram group
# async def telegram_bot_sendimage(image_url, group_id, msg_id):
#     data = {'chat_id': group_id, 'photo': image_url, 'reply_to_message_id': msg_id}
#     url = 'https://api.telegram.org/bot' + BOT_TOKEN + '/sendPhoto'
#
#     response = requests.post(url, data=data)
#     return response.json()


# Checking for specific tone for message
async def checkTone(user_message):
    bot_personality = ''
    match = re.search(r"/setTone\((.*?)\)", user_message, flags=re.IGNORECASE)
    if match:
        substring = match.group(1)
        bot_personality = 'Answer in a ' + substring + ' tone, '
        user_message=user_message.replace('/setTone('+substring+')', '')
    return [user_message, bot_personality]


def user_exists(chat_id):
    # Establish a connection to the SQLite database
    conn_pay = sqlite3.connect(SUBSCRIPTION_DATABASE)
    cursor_pay = conn_pay.cursor()
    # Execute a query to retrieve the user by chat_id
    cursor_pay.execute('SELECT * FROM subscriptions WHERE chat_id = ?', (chat_id,))
    result = cursor_pay.fetchone()
    # Close the database connection
    # Check if the query result contains any rows (user found)
    if result:
        return True
    else:
        return False


def add_new_user(user_id):
    conn_pay = sqlite3.connect(SUBSCRIPTION_DATABASE)
    cursor_pay = conn_pay.cursor()
    revealed_date = datetime.now().strftime('%Y-%m-%d')
    referral_link = f'https://t.me/{BOT_NAME}?start={user_id}'

    # Add a new user with default subscription status, start date, and expiration date
    cursor_pay.execute("INSERT INTO subscriptions (chat_id, subscription_status, revealed_date, referral_link) "
                       "VALUES (?, 0, ?, ?)", (user_id, revealed_date, referral_link))
    conn_pay.commit()


async def add_reffered_by(chat_id, referree):
    conn_pay = sqlite3.connect(SUBSCRIPTION_DATABASE)
    cursor_pay = conn_pay.cursor()

    cursor_pay.execute("SELECT referred_by FROM subscriptions WHERE chat_id = ?", (chat_id,))
    result = cursor_pay.fetchone()[0]
    refer_exist = True if result else False
    print('The previous referral link is', result)
    if not refer_exist:
        # Add to a newly added user the referree id
        cursor_pay.execute("UPDATE subscriptions SET referred_by = ? WHERE chat_id = ?", (referree, chat_id))
        conn_pay.commit()
        try:
            x = await telegram_bot_sendtext(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –±–æ—Ç—É {BOT_NAME} –ø–æ '
                                      f'–≤–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ', referree, None)
        except requests.exceptions.RequestException as e:
            print('Couldnt send the message to referree', e)
        return True
    else:
        print(f'The {chat_id} was already joined by a referral link')
        return False


def add_referral_bonus(referree, referral_bonus):
    conn_pay = sqlite3.connect('subscriptions.db')
    cursor_pay = conn_pay.cursor()
    # Execute the SQL query to increment the bonus count by 1
    cursor_pay.execute(f"UPDATE subscriptions SET bonus_count = bonus_count + {referral_bonus} WHERE chat_id = ?", (referree,))
    conn_pay.commit()

# Decrement the free messages count for the specified chat_id


def decrease_free_messages(chat_id):
    conn_pay = sqlite3.connect('subscriptions.db')
    cursor_pay = conn_pay.cursor()
    # Execute the SQL query to decrement the free messages count by 1
    cursor_pay.execute("UPDATE subscriptions SET bonus_count = bonus_count - 1 WHERE chat_id = ?",
                       (chat_id,))
    # Commit the changes to the database
    conn_pay.commit()


@retry(attempts=3)
async def user_subscribed(user_id, channel_name):
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–∞–Ω–∞–ª
    api_url = f'https://api.telegram.org/bot{BOT_TOKEN}/getChatMember'
    params = {'chat_id': '@'+channel_name, 'user_id': user_id}
    response = requests.get(api_url, params=params)
    response.raise_for_status()
    data = response.json()
    print(data)
    if response.status_code == 200 and data['ok']:
        # Check if the user is a member of the channel
        return data['result']['status'] == 'member' or data['result']['status'] == 'creator'
    else:
        # Failed to fetch the chat member information
        return False


def update_subscription_status(chat_id, subscription_status, start_date, expiration_date):
    conn_pay = sqlite3.connect(SUBSCRIPTION_DATABASE)
    cursor_pay = conn_pay.cursor()
    # Update the subscription status for the user
    cursor_pay.execute("UPDATE subscriptions SET subscription_status = ? WHERE chat_id = ?",
                       (subscription_status, chat_id))
    # Set the start and expiration dates for the user's subscription
    cursor_pay.execute("UPDATE subscriptions SET start_date = ?, expiration_date = ? WHERE chat_id = ?",
                       (start_date, expiration_date, chat_id))
    conn_pay.commit()


def check_subscription_validity(chat_id):
    conn_pay = sqlite3.connect(SUBSCRIPTION_DATABASE)
    cursor_pay = conn_pay.cursor()
    # Get the subscription status, start date, and expiration date for the user
    cursor_pay.execute("SELECT subscription_status, start_date, expiration_date FROM subscriptions WHERE chat_id = ?",
                       (chat_id,))
    result = cursor_pay.fetchone()
    if result is not None:
        subscription_status, start_date, expiration_date = result
        if subscription_status == 1:
            start_date = datetime.strptime(start_date, '%Y-%m-%d')
            expiration_date = datetime.strptime(expiration_date, '%Y-%m-%d')
            if start_date <= datetime.now() <= expiration_date:
                return True
    return False


async def ChatGPTbot():
    with open(FILENAME) as f:
        last_update = f.read()
    f.close()

    # get updates for the bot
    try:
        result = await get_updates(last_update)
    except requests.exceptions.RequestException as e:
        print("Didn't get the update from TG", e)
        try:
            x = await telegram_bot_sendtext(f"–ù–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –∞–ø–¥–µ–π—Ç –æ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º–∞ - {e}", '163905035', None)
        except requests.exceptions.RequestException as e:
            print('Error in sending text to TG', e)

    try:
        # Checking for new message and processing them
        for res in result:
            last_update = await parse_updates(res, last_update)
    except Exception as e:
        print("General error in ChatGPTbot", e)
        try:
            x = await telegram_bot_sendtext(f"–°–ª—É—á–∏–ª–∞—Å—å –æ–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ –∫–æ–¥–µ - {e}", '163905035', None)
        except requests.exceptions.RequestException as e:
            print('Error in sending text to TG', e)

    # Updating file with last update ID
    with open(FILENAME, 'w') as f:
        f.write(last_update)
    return "done"


async def main():
    while True:
        await ChatGPTbot()
        await asyncio.sleep(5)

loop = asyncio.get_event_loop()
loop.run_until_complete(main())

cursor.close()
conn.close()
cursor_pay.close()
conn_pay.close()

# TODO add the /help command

# TODO Make bot send postponed messages

# TODO Make GPT wrap what is supposed to be sent to user, like "Tell him that he has two days left"..

# TODO If the update number gets deleted...

# TODO Add referral bonus for payment

# TODO Add free use condition - subscribe to Biblionarium


# –Ø –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –±–æ—Ç (–Ω–∞ –æ—Å–Ω–æ–≤–µ ChatGPT), –∫–æ—Ç–æ—Ä—ã–π –ª—é–±–∏—Ç –ø–æ–¥—Ä–æ–±–Ω–æ –æ–±—ä—è—Å–Ω—è—Ç—å –≤–µ—â–∏ –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –∏—Å—Ç–æ—Ä–∏–∏ –±–µ—Å–µ–¥—ã.
# –ú–æ–∂–µ—à—å —Å–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω—è –ø—Ä–æ –º–Ω–æ–≥–∏–µ –≤–µ—â–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:
# -–Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–Ω—ã–π –∫–æ–¥
# -–Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤, —Ä–∞—Å—Å–∫–∞–∑ –∏–ª–∏ –ø–∏—Å—å–º–æ
# –Ø –º–æ–≥—É –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–µ—Å–µ–¥—É, —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç, —É—Å–ø–æ–∫–æ–∏—Ç—å.
# –Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –≤–µ—â–∏, –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å.
# –Ø –º–æ–≥—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å —Ñ–∞–π–ª–∞–º–∏, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º, —Ä–∏—Å–æ–≤–∞—Ç—å.