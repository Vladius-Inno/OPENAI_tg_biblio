# -*- coding: utf-8 -*-

from datetime import datetime, timedelta
import fantlab
import random
import requests
from constants import DAY_LIMIT_SUBSCRIPTION


class Handler:
    def __init__(self, db_int=None, telegram_ext=None):
        self.db_int = db_int
        # self.opt_ext = opt_ext
        # self.subs_ext = subs_ext
        self.telegram_ext = telegram_ext

    async def handle_clear_command(self, conn, chat_id):
        # Update the messages associated with the specified chat_id, so they are "cleared"
        await self.db_int.clear_messages(conn, chat_id)

    async def handle_info_command(self, conn, chat_id, validity, messages_left, free_messages_left, referral_bonus):
        subscription_status = '–ê–∫—Ç–∏–≤–Ω–∞' if validity else '–ù–µ –∞–∫—Ç–∏–≤–Ω–∞'
        # Get the current date and time
        current_datetime = datetime.now()
        # Increment the current date by 1 day to get the next day
        next_day = current_datetime + timedelta(days=1)
        # Set the time to 00:00:00 for the next day
        next_day_start = next_day.replace(hour=0, minute=0, second=0, microsecond=0)
        # Calculate the time difference between the current datetime and the next day's start
        time_left = next_day_start - current_datetime
        # Extract the number of hours and minutes from the time difference
        hours_left = time_left.seconds // 3600
        minutes_left = (time_left.seconds % 3600) // 60

        if messages_left < 0:
            messages_left = 0

        if validity:
            # conn_pay = sqlite3.connect(SUBSCRIPTION_DATABASE)
            # cursor_pay = conn_pay.cursor()
            # # Retrieve the expiration date for the user
            # cursor_pay.execute("SELECT expiration_date FROM subscriptions WHERE chat_id = ?", (chat_id,))
            # result = cursor_pay.fetchone()[0]
            result = await self.db_int.get_expiration_date(conn, chat_id)

            expiration_date = datetime.strptime(result, '%Y-%m-%d').strftime('%d-%m-%Y')
            message = f'''
    ‚ö°Ô∏è–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_status} –¥–æ {expiration_date}.

    üîÑ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_left}. –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ : {hours_left} —á. {minutes_left} –º–∏–Ω.

    –¢–∞–∫–∂–µ —É –≤–∞—Å –µ—Å—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {free_messages_left}.                  
        '''
        else:
            message = f'''
    ‚ö°Ô∏è–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_status}

    üîÑ –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {messages_left}. –õ–∏–º–∏—Ç –æ–±–Ω–æ–≤–∏—Ç—Å—è —á–µ—Ä–µ–∑ : {hours_left} —á. {minutes_left} –º–∏–Ω.

    –¢–∞–∫–∂–µ —É –≤–∞—Å –µ—Å—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {free_messages_left}.              

    üöÄ –ù—É–∂–Ω–æ –±–æ–ª—å—à–µ?      

    –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø–æ–ª—É—á–∏—Ç–µ {DAY_LIMIT_SUBSCRIPTION} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–µ–Ω—å. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –±–æ—Ç–∞ –∏ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä.

    –¢–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥—Ä—É–≥—É —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /refer. –ö–æ–≥–¥–∞ –¥—Ä—É–≥ –Ω–∞—á–Ω—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ {referral_bonus} –±–æ–Ω—É—Å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. 

    '''
        await self.telegram_ext.send_text(message, chat_id)
        # try:
        #     x = await telegram_bot_sendtext(message, chat_id)
        # except requests.exceptions.RequestException as e:
        #     print('Coulndt send the info message', e)

    async def start_command(self, chat_id, name, day_limit_private, day_limit_subscription, referral_bonus,
                            month_subscription_price, set_keyboard):
        message = f'''{name}, –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!

‚ö°Ô∏è–Ø –±–æ—Ç, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é—â–∏–π –∫–Ω–∏–≥–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π ChatGPT

–Ø —É–º–µ—é:
    
1. –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –∫–Ω–∏–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π - –∑–∞–π–¥–∏—Ç–µ –≤ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–∏–Ω—é—é –∫–Ω–æ–ø–∫—É –º–µ–Ω—é —Å–ª–µ–≤–∞
2. –ò—Å–∫–∞—Ç—å –∫–Ω–∏–≥–∏  - –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–∞–π–¥–∏ + –≤–∞—à –∑–∞–ø—Ä–æ—Å", –Ω–∞–ø—Ä–∏–º–µ—Ä "–ù–∞–π–¥–∏ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä"
3. –î–µ–ª–∞—Ç—å –≤—Å—ë —Ç–æ, —á—Ç–æ —É–º–µ–µ—Ç ChatGPT:
    - –ü–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç—ã
    - –û–±–æ–±—â–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–µ—Å–µ–¥—É –∏ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

–í –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ {day_limit_private} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å—É—Ç–∫–∏. –° –ø–æ–¥–ø–∏—Å–∫–æ–π –ª–∏–º–∏—Ç —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è –¥–æ {day_limit_subscription}.

–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –±–æ—Ç–∞ –∏ –æ–ø–ª–∞—á–∏–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä. –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏ - {month_subscription_price}—Ä –≤ –º–µ—Å—è—Ü.

üîÑ –í—ã –º–æ–∂–µ—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –±–µ—Å–µ–¥—É, —á—Ç–æ–±—ã —è –Ω–µ –ø–æ–¥—Ç—è–≥–∏–≤–∞–ª –∏–∑ –ø–∞–º—è—Ç–∏ –Ω–µ–Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –¥–ª—è —ç—Ç–æ–≥–æ –µ—Å—Ç—å –∫–æ–º–∞–Ω–¥–∞ /clear.

‚ùï –ï—Å–ª–∏ —è –≤–∞–º –Ω–µ –æ—Ç–≤–µ—á–∞—é, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–æ–π /start

–°–ø–∞—Å–∏–±–æ! '''
        # try:
        #     x = await telegram_bot_sendtext(message, chat_id, None, set_keyboard(chat_id))
        # except requests.exceptions.RequestException as e:
        #     print('Coulndt send the welcome message', e)
        await self.telegram_ext.send_text(message, chat_id, None, set_keyboard)

    async def refer_command(self, conn, chat_id):
        # Get a referral link from the database
        result = await self.db_int.get_referral(conn, chat_id)
        print('The referral link is', result)

        message = f'''
‚ö° –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –±–æ—Ç—É: {result}.

üîÑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥—É.
            '''
        # try:
        #     x = await telegram_bot_sendtext(message, chat_id, None)
        # except requests.exceptions.RequestException as e:
        #     print('Coulndt send the info message', e)
        await self.telegram_ext.send_text(message, chat_id)

    async def handle_recom_command(self, chat_id, markup):
        # TODO Is the commented section required?
        # # Initialize the Fantlab_api with the base URL
        # api_connect = fantlab.FantlabApi()
        # # Initialize Service A with the ServiceBClient
        # service = fantlab.BookDatabase(api_connect)
        message = f"–ü–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —Å–ª—É—á–∞–π–Ω—ã–º –∫–Ω–∏–≥–∞–º, –∏ –º—ã —Å–º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –ø–æ–¥–±–∏—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ù–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∫–Ω–∏–≥—É –º–æ–∂–Ω–æ, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—à–µ–Ω–∏–µ, –Ω–∞—á–∏–Ω–∞—é—â–µ–µ—Å—è —Å '–Ω–∞–π–¥–∏'"
        await self.telegram_ext.send_text(message, chat_id, None, markup)

    async def help_command(self, chat_id):
        message = f'''
–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –æ—Ç ChatGPT. –ë–æ—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∏–∞–ª–æ–≥–∞. –û–Ω –∑–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∏ –ø–æ–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —Ä–∞–º–∫–∞—Ö 5 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

–ë–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–æ–º, –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º - –Ω—É–∂–Ω–æ —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–∏—Ç—å –µ–º—É –æ–± —ç—Ç–æ–º. 

–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –º–æ–∂–Ω–æ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /clear.
    
–í —Ä–µ–∂–∏–º–µ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –±–æ—Ç –ø–æ–¥–±–µ—Ä—ë—Ç –¥–ª—è –≤–∞—Å –∫–Ω–∏–≥–∏.

–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º - @v_smetanin
            '''
        # try:
        #     x = await telegram_bot_sendtext(message, chat_id, None)
        # except requests.exceptions.RequestException as e:
        #     print('Coulndt send the help message', e)
        await self.telegram_ext.send_text(message, chat_id)

    async def successful_payment_in_message(self, conn, result):
        try:
            if result['message']['successful_payment']:
                try:
                    await self.telegram_ext.handle_successful_payment(conn, result['message'], self.db_int)
                    print('Successful payment')
                    # last_update = str(int(result['update_id']))
                except requests.exceptions.RequestException as e:
                    print('Couldnt handle the payment')
                    # last_update = str(int(result['update_id']))
                    await self.telegram_ext.send_text('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–ø–ª–∞—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!',
                                                      result['pre_checkout_query']['from']['id'])
                return True
        except Exception as e:
            return False
        return False

    async def text_in_message(self, result, chat_id, msg_id):
        if not ('text' in result.get('message')):
            print('Got the non-text message')
            await self.telegram_ext.send_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø–æ–∫–∞ —á—Ç–æ —è —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç",
                                              chat_id, msg_id)
            return False
        return True
